<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Piyush Chauhan</title>
    <link>https://piyushchauhan2011.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on Piyush Chauhan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Piyush Chauhan</copyright>
    <lastBuildDate>Tue, 25 Oct 2016 01:00:44 +1100</lastBuildDate>
    <atom:link href="https://piyushchauhan2011.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Basic graph algorithms in Kotlin</title>
      <link>https://piyushchauhan2011.github.io/2016/10/25/basic-graph-algorithms-in-kotlin/</link>
      <pubDate>Tue, 25 Oct 2016 01:00:44 +1100</pubDate>
      
      <guid>https://piyushchauhan2011.github.io/2016/10/25/basic-graph-algorithms-in-kotlin/</guid>
      <description>&lt;h3 id=&#34;bfs-with-conneted-components&#34;&gt;BFS with conneted components&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;import java.util.*

/**
Graph
9 7
0 1
1 2
1 3
2 3
3 4
6 7
6 8

Result
u: 0 and [Node(color=BLACK, distance=0, parent=-1), Node(color=BLACK, distance=1, parent=1), Node(color=BLACK, distance=2, parent=2), Node(color=BLACK, distance=2, parent=3), Node(color=BLACK, distance=3, parent=4)]
u: 6 and [Node(color=BLACK, distance=0, parent=-1), Node(color=BLACK, distance=1, parent=7), Node(color=BLACK, distance=1, parent=8)]
u: 5 and [Node(color=BLACK, distance=0, parent=-1)]
 */

data class Node(var color: Color, var distance: Int = Int.MAX_VALUE, var parent: Int = -1);

var nodes: MutableList&amp;lt;Node&amp;gt; = mutableListOf()

fun bfs(u: Int) {
    val queue = mutableListOf&amp;lt;Int&amp;gt;()
//    val tmp: MutableList&amp;lt;Node&amp;gt; = Collections.nCopies(10, Node(Color.WHITE))
    nodes[u].distance = 0
    queue.add(u)

    while(!queue.isEmpty()) {
        val current = queue.removeAt(0)
        if(nodes[current].color == Color.WHITE) {
            nodes[current].color = Color.BLACK
            adj[current].forEach {
                if (nodes[it.first].distance == Int.MAX_VALUE) {
                    nodes[it.first].distance = nodes[current].distance + it.second
                    nodes[it.first].parent = it.first
                    queue.add(it.first)
                }
            }
        }
    }

    val visitedNodes = nodes.filter { it.color == Color.BLACK }
    println(&amp;quot;u: $u and $visitedNodes&amp;quot;)
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    var tmp = sc.readLine()
    val (v, e) = tmp.split(&amp;quot; &amp;quot;).map { it.toInt() }

    (0..v-1).forEach { nodes.add(Node(Color.WHITE)) }
    (0..v-1).forEach { adj.add(mutableListOf()) }

    (0..v-1).forEach { nodes[it] = Node(Color.WHITE) }
    (0..e-1).forEach {
        tmp = sc.readLine()
        val (tv, tw) = tmp.split(&amp;quot; &amp;quot;).map { it.toInt() }
        adj[tv].add(Pair(tw, 1))
        adj[tw].add(Pair(tv, 1))
    }

    bfs(0)
    nodes = mutableListOf()
    (0..v-1).forEach { nodes.add(Node(Color.WHITE)) }
    bfs(6)
    nodes = mutableListOf()
    (0..v-1).forEach { nodes.add(Node(Color.WHITE)) }
    bfs(5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;dfs-with-connected-components&#34;&gt;DFS with connected components&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;/**
Graph
9 7
0 1
1 2
1 3
2 3
3 4
6 7
6 8

Result
Component 1 0 1 2 3 4
Component 2 5
Component 3 6 7 8
There are 3 connected components
 */

import java.io.BufferedReader
import java.io.InputStreamReader

var vert: MutableList&amp;lt;Color&amp;gt; = mutableListOf()
var adj: MutableList&amp;lt;MutableList&amp;lt;Pair&amp;lt;Int, Int&amp;gt;&amp;gt;&amp;gt; = mutableListOf()

val sc = BufferedReader(InputStreamReader(System.`in`))

enum class Color {
    BLACK, WHITE
}

fun dfs(u: Int) {
    vert[u] = Color.BLACK
    print(&amp;quot; $u&amp;quot;)
    (0..adj[u].size-1).forEach {
        val tv = adj[u][it]
        if(vert[tv.first] == Color.WHITE) dfs(tv.first)
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    var tmp = sc.readLine()
    var (v, e) = tmp.split(&amp;quot; &amp;quot;).map { it.toInt() }

    (0..v-1).forEach { vert.add(Color.WHITE) }
    (0..v-1).forEach { adj.add(mutableListOf()) }

    (0..v-1).forEach { vert[it] = Color.WHITE }
    (0..e-1).forEach {
        tmp = sc.readLine()
        val (tv, tw) = tmp.split(&amp;quot; &amp;quot;).map { it.toInt() }
        adj[tv].add(Pair(tw, 1))
        adj[tw].add(Pair(tv, 1))
    }

    var numComponents = 0
    (0..v-1).forEach {
        if (vert[it] == Color.WHITE) {
            print(&amp;quot;Component ${++numComponents}&amp;quot;)
            dfs(it)
            println()
        }
    }
    println(&amp;quot;There are $numComponents connected components&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>good to great</title>
      <link>https://piyushchauhan2011.github.io/2016/10/25/good-to-great/</link>
      <pubDate>Tue, 25 Oct 2016 00:38:25 +1100</pubDate>
      
      <guid>https://piyushchauhan2011.github.io/2016/10/25/good-to-great/</guid>
      <description>&lt;p&gt;I read &lt;strong&gt;Good to Great in January 2016&lt;/strong&gt;. An awesome read sharing detailed analysis on how good companies became great.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>